For recent changelog see CHANGELOG.md

-----

v0.10.15  --  2017.03.20
* Fix Object.isValue (it was actually isNotValue)

v0.10.14  --  2017.03.15
* Object.isValue util

v0.10.13  --  2017.03.13
* Introduce JSON.safeStringify
* Improve message handling in error/custom
* Fix Array#concat shim
* Improve Array#flatten algorithm so it's stack trace friendly
* Make Object.isObject ES3 compatible

v0.10.12  --  2016.07.01
* Ensure symbols are copied in Object.mixin
* Prevent RangeError errors in array#flatten
* Do not validate invalidate dates in validDate

v0.10.11  --  2015.12.18
* Ensure that check for implementation of RegExp flags doesn't crash in V8 (thanks @mathiasbynens)

v0.10.10  --  2015.12.11
* Add Object.isNumberValue util

v0.10.9  --  2015.12.01
* Add Object.ensureNaturalNumber and Object.ensureNaturalNumberValue

v0.10.8  --  2015.10.02
* Add Number.isNatural
* Add Object.find and Object.findKey
* Support arrays in Object.copyDeep
* Fix iteration issue in forEachRight and someRight
* Fix detection of native sinh
* Depend on es6-symbol v3

v0.10.7  --  2015.04.22
* New utlitities. They're convention differs from v0.10, as they were supposed to land in v1.
  Still they're non breaking and start the conventions to be used in v1
  * Object.validateArrayLike
  * Object.validateArrayLikeObject
  * Object.validateStringifiable
  * Object.validateStringifiableValue
  * Universal utilities for array-like/iterable objects
    * Iterable.is
    * Iterable.validate
    * Iterable.validateObject
    * Iterable.forEach
* Fix camelToHyphen resolution, it must be absolutely reversable by hyphenToCamel
* Fix calculations of large numbers in Math.tanh
* Fix algorithm of Math.sinh
* Fix indexes to not use real symbols
* Fix length of String.fromCodePoint
* Fix tests of Array#copyWithin
* Update Travis CI configuration

v0.10.6  --  2015.02.02
* Fix handling of infinite values in Math.trunc
* Fix handling of getters in Object.normalizeOptions

v0.10.5  --  2015.01.20
* Add Function#toStringTokens
* Add Object.serialize and Object.unserialize
* Add String.randomUniq
* Fix Strin#camelToHyphen issue with tokens that end with digit
* Optimise Number.isInteger logic
* Improve documentation
* Configure lint scripts
* Fix spelling of LICENSE

v0.10.4  --  2014.04.30
* Assure maximum spec compliance of Array.of and Array.from (thanks @mathiasbynens)
* Improve documentations

v0.10.3  --  2014.04.29
Provide accurate iterators handling:
* Array.from improvements:
  * Assure right unicode symbols resolution when processing strings in Array.from
  * Rely on ES6 symbol shim and use native @@iterator Symbol if provided by environment
* Add methods:
  * Array.prototype.entries
  * Array.prototype.keys
  * Array.prototype.values
  * Array.prototype[@@iterator]
  * String.prototype[@@iterator]

Improve documentation

v0.10.2  --  2014.04.24
- Simplify and deprecate `isCallable`. It seems in ES5 based engines there are
  no callable objects which are `typeof obj !== 'function'`
- Update Array.from map callback signature (up to latest resolution of TC39)
- Improve documentation

v0.10.1  --  2014.04.14
Bump version for npm
(Workaround for accidental premature publish & unpublish of v0.10.0 a while ago)

v0.10.0  --  2014.04.13
Major update:
- All methods and function specified for ECMAScript 6 are now introduced as
  shims accompanied with functions through which (optionally) they can be
  implementend on native objects
- Filename convention was changed to shorter and strictly lower case names. e.g.
  `lib/String/prototype/starts-with` became `string/#/starts-with`
- Generated functions are guaranteed to have expected length
- Objects with null prototype (created via `Object.create(null)`) are widely
  supported (older version have crashed due to implied `obj.hasOwnProperty` and
  related invocations)
- Support array subclasses
- When handling lists do not limit its length to Uint32 range
- Use newly introduced `Object.eq` for strict equality in place of `Object.is`
- Iteration of Object have been improved so properties that were hidden or
  removed after iteration started are not iterated.

Additions:
- `Array.isPlainArray`
- `Array.validArray`
- `Array.prototype.concat` (as updated with ES6)
- `Array.prototype.copyWithin` (as introduced with ES6)
- `Array.prototype.fill` (as introduced with ES6)
- `Array.prototype.filter` (as updated with ES6)
- `Array.prototype.findIndex` (as introduced with ES6)
- `Array.prototype.map` (as updated with ES6)
- `Array.prototype.separate`
- `Array.prototype.slice` (as updated with ES6)
- `Array.prototype.splice` (as updated with ES6)
- `Function.prototype.copy`
- `Math.acosh` (as introduced with ES6)
- `Math.atanh` (as introduced with ES6)
- `Math.cbrt` (as introduced with ES6)
- `Math.clz32` (as introduced with ES6)
- `Math.cosh` (as introduced with ES6)
- `Math.expm1` (as introduced with ES6)
- `Math.fround` (as introduced with ES6)
- `Math.hypot` (as introduced with ES6)
- `Math.imul` (as introduced with ES6)
- `Math.log2` (as introduced with ES6)
- `Math.log10` (as introduced with ES6)
- `Math.log1p` (as introduced with ES6)
- `Math.sinh` (as introduced with ES6)
- `Math.tanh` (as introduced with ES6)
- `Math.trunc` (as introduced with ES6)
- `Number.EPSILON` (as introduced with ES6)
- `Number.MIN_SAFE_INTEGER` (as introduced with ES6)
- `Number.MAX_SAFE_INTEGER` (as introduced with ES6)
- `Number.isFinite` (as introduced with ES6)
- `Number.isInteger` (as introduced with ES6)
- `Number.isSafeInteger` (as introduced with ES6)
- `Object.create` (with fix for V8 issue which disallows prototype turn of
  objects derived from null
- `Object.eq` - Less restrictive version of `Object.is` based on SameValueZero
  algorithm
- `Object.firstKey`
- `Object.keys` (as updated with ES6)
- `Object.mixinPrototypes`
- `Object.primitiveSet`
- `Object.setPrototypeOf` (as introduced with ES6)
- `Object.validObject`
- `RegExp.escape`
- `RegExp.prototype.match` (as introduced with ES6)
- `RegExp.prototype.replace` (as introduced with ES6)
- `RegExp.prototype.search` (as introduced with ES6)
- `RegExp.prototype.split` (as introduced with ES6)
- `RegExp.prototype.sticky` (as introduced with ES6)
- `RegExp.prototype.unicode` (as introduced with ES6)
- `String.fromCodePoint` (as introduced with ES6)
- `String.raw` (as introduced with ES6)
- `String.prototype.at`
- `String.prototype.codePointAt` (as introduced with ES6)
- `String.prototype.normalize` (as introduced with ES6)
- `String.prototype.plainReplaceAll`

Removals:
- `reserved` set
- `Array.prototype.commonLeft`
- `Function.insert`
- `Function.remove`
- `Function.prototype.silent`
- `Function.prototype.wrap`
- `Object.descriptor` Move to external `d` project.
  See: https://github.com/medikoo/d
- `Object.diff`
- `Object.extendDeep`
- `Object.reduce`
- `Object.values`
- `String.prototype.trimCommonLeft`

Renames:
- `Function.i` into `Function.identity`
- `Function.k` into `Function.constant`
- `Number.toInt` into `Number.toInteger`
- `Number.toUint` into `Number.toPosInteger`
- `Object.extend` into `Object.assign` (as introduced in ES 6)
- `Object.extendProperties` into `Object.mixin`, with improved internal
  handling, so it matches temporarily specified `Object.mixin` for ECMAScript 6
- `Object.isList` into `Object.isArrayLike`
- `Object.mapToArray` into `Object.toArray` (with fixed function length)
- `Object.toPlainObject` into `Object.normalizeOptions` (as this is the real
  use case where we use this function)
- `Function.prototype.chain` into `Function.prototype.compose`
- `Function.prototype.match` into `Function.prototype.spread`
- `String.prototype.format` into `String.formatMethod`

Improvements & Fixes:
- Remove workaround for primitive values handling in object iterators
- `Array.from`: Update so it follows ES 6 spec
- `Array.prototype.compact`: filters just null and undefined values
  (not all falsies)
- `Array.prototype.eIndexOf` and `Array.prototype.eLastIndexOf`: fix position
  handling, improve internals
- `Array.prototype.find`: return undefined not null, in case of not found
  (follow ES 6)
- `Array.prototype.remove` fix function length
- `Error.custom`: simplify, Custom class case is addressed by outer
  `error-create` project -> https://github.com/medikoo/error-create
- `Error.isError` true only for Error instances (remove detection of host
  Exception objects)
- `Number.prototype.pad`: Normalize negative pad
- `Object.clear`: Handle errors same way as in `Object.assign`
- `Object.compact`: filters just null and undefined values (not all falsies)
- `Object.compare`: Take into account NaN values
- `Object.copy`: Split into `Object.copy` and `Object.copyDeep`
- `Object.isCopy`: Separate into `Object.isCopy` and `Object.isCopyDeep`, where
  `isCopyDeep` handles nested plain objects and plain arrays only
- `String.prototype.endsWith`: Adjust up to ES6 specification
- `String.prototype.repeat`: Adjust up to ES6 specification and improve algorithm
- `String.prototype.simpleReplace`: Rename into `String.prototype.plainReplace`
- `String.prototype.startsWith`: Adjust up to ES6 specification
- Update lint rules, and adjust code to that
- Update Travis CI configuration
- Remove Makefile (it's cross-env utility)

v0.9.2  --  2013.03.11
Added:
* Array.prototype.isCopy
* Array.prototype.isUniq
* Error.CustomError
* Function.validFunction
* Object.extendDeep
* Object.descriptor.binder
* Object.safeTraverse
* RegExp.validRegExp
* String.prototype.capitalize
* String.prototype.simpleReplace

Fixed:
* Fix Array.prototype.diff for sparse arrays
* Accept primitive objects as input values in Object iteration methods and
  Object.clear, Object.count, Object.diff, Object.extend,
  Object.getPropertyNames, Object.values
* Pass expected arguments to callbacks of Object.filter, Object.mapKeys,
  Object.mapToArray, Object.map
* Improve callable callback support in Object.mapToArray

v0.9.1  --  2012.09.17
* Object.reduce - reduce for hash-like collections
* Accapt any callable object as callback in Object.filter, mapKeys and map
* Convention cleanup

v0.9.0  --  2012.09.13
We're getting to real solid API

Removed:
* Function#memoize - it's grown up to be external package, to be soon published
  as 'memoizee'
* String.guid - it doesn't fit es5-ext (extensions) concept, will be provided as
  external package
# Function.arguments - obsolete
# Function.context - obsolete
# Function#flip - not readable when used, so it was never used
# Object.clone - obsolete and confusing

Added:
* String#camelToHyphen - String format convertion

Renamed:
* String#dashToCamelCase -> String#hyphenToCamel

Fixes:
* Object.isObject - Quote names in literals that match reserved keywords
  (older implementations crashed on that)
* String#repeat - Do not accept negative values (coerce them to 1)

Improvements:
* Array#remove - Accepts many arguments, we can now remove many values at once
* Object iterators (forEach, map, some) - Compare function invoked with scope
  object bound to this
* Function#curry - Algorithm cleanup
* Object.isCopy - Support for all types, not just plain objects
* Object.isPlainObject - Support for cross-frame objects
* Do not memoize any of the functions, it shouldn't be decided internally
* Remove Object.freeze calls in reserved, it's not up to convention
* Improved documentation
* Better linting (hard-core approach using both JSLint mod and JSHint)
* Optional arguments are now documented in funtions signature

v0.8.2  --  2012.06.22
Fix errors in Array's intersection and exclusion methods, related to improper
usage of contains method

v0.8.1  --  2012.06.13
Reorganized internal logic of Function.prototype.memoize. So it's more safe now
and clears cache properly. Additionally preventCache option was provided.

v0.8.0  --  2012.05.28
Again, major overhaul. Probably last experimental stuff was trashed, all API
looks more like standard extensions now.

Changes:
* Turn all Object.prototype extensions into functions and move them to Object
namespace. We learned that extending Object.prototype is bad idea in any case.
* Rename Function.prototype.curry into Function.prototype.partial. This function
  is really doing partial application while currying is slightly different
  concept.
* Convert Function.prototype.ncurry to new implementation of
  Function.prototype.curry, it now serves real curry concept additionaly it
  covers use cases for aritize and hold, which were removed.
* Rename Array's peek to last, and provide support for sparse arrays in it
* Rename Date's monthDaysCount into daysInMonth
* Simplify object iterators, now order of iteration can be configured with just
  compareFn argument (no extra byKeys option)
* Rename Object.isDuplicate to Object.isCopy
* Rename Object.isEqual to Object.is which is compatible with future 'is'
  keyword
* Function.memoize is now Function.prototype.memoize. Additionally clear cache
  functionality is added, and access to original arguments object.
* Rename validation functions: assertNotNull to validValue, assertCallable to
  validCallable. validValue was moved to Object namespace. On success they now
  return validated value instead of true, it supports better composition.
  Additionally created Date.validDate and Error.validError
* All documentation is now held in README.md not in code files.
* Move guid to String namespace. All guids now start with numbers.
* Array.generate: fill argument is now optional
* Object.toArray is now Array.from (as new ES6 specification draft suggests)
* All methods that rely on indexOf or lastIndexOf, now rely on egal (Object.is)
  versions of them (eIndexOf, eLastIndexOf)
* Turn all get* functions that returned methods into actuall methods (get*
  functionality can still be achieved with help of Function.prototype.partial).
  So: Date.getFormat is now Date.prototype.format,
  Number.getPad is now Number.prototype.pad,
  String.getFormat is now String.prototype.format,
  String.getIndent is now String.prototype.indent,
  String.getPad is now String.prototype.pad
* Refactored Object.descriptor, it is now just two functions, main one and
  main.gs, main is for describing values, and gs for describing getters and
  setters. Configuration is passed with first argument as string e.g. 'ce' for
  configurable and enumerable. If no configuration string is provided then by
  default it returns configurable and writable but not enumerable for value or
  configurable but not enumerable for getter/setter
* Function.prototype.silent now returns prepared function (it was
  expected to be fixed for 0.7)
* Reserved keywords map (reserved) is now array not hash.
* Object.merge is now Object.extend (while former Object.extend was completely
  removed) - 'extend' implies that we change object, not creating new one (as
  'merge' may imply). Similarily Object.mergeProperties was re